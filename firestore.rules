
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Anyone can view a user's public profile.
      allow read: if true;

      // A user can create their own profile document, but not for others.
      // We validate required fields on creation to ensure data integrity.
      allow create: if isOwner(userId)
                    && request.resource.data.username is string && request.resource.data.username.size() >= 3 && request.resource.data.username.size() <= 20
                    && request.resource.data.displayName is string && request.resource.data.displayName.size() >= 2 && request.resource.data.displayName.size() <= 50
                    && !('pollitPoints' in request.resource.data)
                    && !('tipsReceived' in request.resource.data);

      // A user can only update their own profile.
      // Sensitive fields like points, tips, or roles cannot be modified from the client.
      allow update: if isOwner(userId)
                    && !('pollitPoints' in request.resource.data)
                    && !('tipsReceived' in request.resource.data)
                    && !('id' in request.resource.data)
                    && !('role' in request.resource.data);

      // For security, profiles cannot be deleted from the client. This must be handled server-side.
      allow delete: if false;

      // --- Users Subcollections ---
      match /notifications/{notificationId} {
        // Users can only read their own notifications.
        allow read: if isOwner(userId);
        // Notifications are created by server-side functions, not clients.
        allow write: if false;
      }
    }

    // =================================
    // Polls Collection
    // =================================
    match /polls/{pollId} {
      // Anyone can read any poll.
      allow read: if true;

      // Signed-in users can create polls, with validation.
      allow create: if isSignedIn()
                    // Creator must be the person making the request.
                    && request.resource.data.creatorId == request.auth.uid
                    // Validate required fields.
                    && request.resource.data.question is string && request.resource.data.question.size() > 0
                    && request.resource.data.options is list && request.resource.data.options.size() >= 2 && request.resource.data.options.size() <= 4
                    // Counters must be initialized to 0.
                    && request.resource.data.likes == 0
                    && request.resource.data.comments == 0
                    && request.resource.data.tipCount == 0;

      // Allow specific counter updates for likes and comments, but nothing else.
      // This supports the transaction logic in the app code.
      allow update: if isSignedIn() && (
        (
          // Rule for liking/unliking
          (request.resource.data.likes == resource.data.likes + 1 || request.resource.data.likes == resource.data.likes - 1) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
        ) ||
        (
          // Rule for adding a comment
          request.resource.data.comments == resource.data.comments + 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments'])
        )
      );

      // The creator of a poll can delete it.
      allow delete: if isOwner(resource.data.creatorId);


      // --- Polls Subcollections ---
      match /likes/{userId} {
        // Anyone can see who liked a poll.
        allow read: if true;
        // A user can only like/unlike for themselves (document ID must be their UID).
        allow create, delete: if isOwner(userId);
      }

      match /comments/{commentId} {
        // Anyone can read comments.
        allow read: if true;
        // A user can create comments on their own behalf.
        allow create: if isSignedIn()
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.text is string && request.resource.data.text.size() > 2;

        // Comments cannot be updated or deleted from the client to preserve conversations.
        // Moderation should be handled by a privileged role (e.g., admin via Cloud Functions).
        allow update, delete: if false;
      }
    }

    // =================================
    // Messages Collection
    // =================================
    match /messages/{messageId} {
      // A user can only read or write messages if they are a participant in the conversation.
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;
    }
  }
}
