
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Allow users to read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Polls: Allow anyone to read polls, but only authenticated users to create them.
    // Liking and commenting are handled via subcollections and transactions.
    match /polls/{pollId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow updates only for specific counter fields (likes, comments, tipCount)
      // The `addCommentToPoll` function updates `comments`.
      allow update: if request.auth != null && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'tipCount', 'isProcessed']);
    }

    // Comments: Allow authenticated users to create comments, and anyone to read them.
    match /polls/{pollId}/comments/{commentId} {
      allow read: if true;
      // User must be logged in, and the comment's userId must match their own uid.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Likes: Allow authenticated users to create/delete their own like document.
    match /polls/{pollId}/likes/{userId} {
      allow read: if true;
      // A user can only like/unlike for themselves.
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Notifications: Users can only read their own notifications.
    match /users/{userId}/notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // Notifications are created by backend functions, so no client-side write rules are needed.
      allow write: if false; 
    }
    
    // Messages: Users can only read/write messages where they are a participant.
    match /messages/{messageId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
    }
  }
}
